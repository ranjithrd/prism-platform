/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Prism Platform API
 * API for managing traces, configurations, devices, and queries
 * OpenAPI spec version: 1.0.0
 */
import useSwr from 'swr';
import type {
  Arguments,
  Key,
  SWRConfiguration
} from 'swr';

import useSWRMutation from 'swr/mutation';
import type {
  SWRMutationConfiguration
} from 'swr/mutation';

import type {
  BodyAddConfigConfigsAddPost,
  BodyAddDeviceDevicesAddPost,
  BodyAddQueryQueriesAddPost,
  BodyAddTraceTracesAddPost,
  BodyCreateJobRequestJobsRunPost,
  BodyCreateTraceV1ApiTracesPost,
  BodyDeleteQueryQueriesQueryIdDeletePost,
  BodyEditConfigConfigsConfigIdEditPost,
  BodyEditDeviceDevicesDeviceIdEditPost,
  BodyEditQueryQueriesQueryIdEditPost,
  Config,
  ConfigCreate,
  ConfigUpdate,
  Device,
  DeviceCreate,
  DeviceUpdate,
  DeviceWithRedisInfo,
  EditQueryAjaxQueriesQueryIdEditAjaxPostBody,
  ExportResultV1ApiGroupResultsQueryIdExportGetParams,
  ExportResultV1ApiResultsTraceIdQueryIdExportGetParams,
  GetConfigurationTracesV1ApiConfigurationsConfigIdTracesGetParams,
  GetDatatablesResultV1ApiGroupResultsQueryIdDatatablesGetParams,
  GetJsonResultV1ApiGroupResultsQueryIdJsonGetParams,
  GetTracesV1ApiTracesGetParams,
  HTTPValidationError,
  HostWithStatus,
  JobRequestCreate,
  JobRequestResponse,
  Query,
  QueryCreate,
  QueryUpdate,
  SearchQueriesQueriesSearchGetParams,
  SrcApiConfigurationsTraceWithDevice,
  SrcApiTracesTraceWithDevice,
  TraceDetail,
  TraceUpdate
} from './schemas';

import axiosInstance from './axios';
type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  
/**
 * @summary Read Devices
 */
export const readDevicesDevicesGet = (
    
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<string>(
    {url: `/devices`, method: 'GET'
    },
    options);
  }



export const getReadDevicesDevicesGetKey = () => [`/devices`] as const;

export type ReadDevicesDevicesGetQueryResult = NonNullable<Awaited<ReturnType<typeof readDevicesDevicesGet>>>
export type ReadDevicesDevicesGetQueryError = unknown

/**
 * @summary Read Devices
 */
export const useReadDevicesDevicesGet = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof readDevicesDevicesGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getReadDevicesDevicesGetKey() : null);
  const swrFn = () => readDevicesDevicesGet(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Read Devices
 */
export const readDevicesDevicesAddGet = (
    
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<string>(
    {url: `/devices/add`, method: 'GET'
    },
    options);
  }



export const getReadDevicesDevicesAddGetKey = () => [`/devices/add`] as const;

export type ReadDevicesDevicesAddGetQueryResult = NonNullable<Awaited<ReturnType<typeof readDevicesDevicesAddGet>>>
export type ReadDevicesDevicesAddGetQueryError = unknown

/**
 * @summary Read Devices
 */
export const useReadDevicesDevicesAddGet = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof readDevicesDevicesAddGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getReadDevicesDevicesAddGetKey() : null);
  const swrFn = () => readDevicesDevicesAddGet(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Add Device
 */
export const addDeviceDevicesAddPost = (
    bodyAddDeviceDevicesAddPost: BodyAddDeviceDevicesAddPost,
 options?: SecondParameter<typeof axiosInstance>) => {const formUrlEncoded = new URLSearchParams();
formUrlEncoded.append(`device_name`, bodyAddDeviceDevicesAddPost.device_name)
if(bodyAddDeviceDevicesAddPost.device_uuid !== undefined && bodyAddDeviceDevicesAddPost.device_uuid !== null) {
 formUrlEncoded.append(`device_uuid`, bodyAddDeviceDevicesAddPost.device_uuid)
 }

    return axiosInstance<string>(
    {url: `/devices/add`, method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded
    },
    options);
  }



export const getAddDeviceDevicesAddPostMutationFetcher = ( options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, { arg }: { arg: BodyAddDeviceDevicesAddPost }) => {
    return addDeviceDevicesAddPost(arg, options);
  }
}
export const getAddDeviceDevicesAddPostMutationKey = () => [`/devices/add`] as const;

export type AddDeviceDevicesAddPostMutationResult = NonNullable<Awaited<ReturnType<typeof addDeviceDevicesAddPost>>>
export type AddDeviceDevicesAddPostMutationError = HTTPValidationError

/**
 * @summary Add Device
 */
export const useAddDeviceDevicesAddPost = <TError = HTTPValidationError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof addDeviceDevicesAddPost>>, TError, Key, BodyAddDeviceDevicesAddPost, Awaited<ReturnType<typeof addDeviceDevicesAddPost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAddDeviceDevicesAddPostMutationKey();
  const swrFn = getAddDeviceDevicesAddPostMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Read Edit Device
 */
export const readEditDeviceDevicesDeviceIdEditGet = (
    deviceId: string,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<string>(
    {url: `/devices/${deviceId}/edit`, method: 'GET'
    },
    options);
  }



export const getReadEditDeviceDevicesDeviceIdEditGetKey = (deviceId: string,) => [`/devices/${deviceId}/edit`] as const;

export type ReadEditDeviceDevicesDeviceIdEditGetQueryResult = NonNullable<Awaited<ReturnType<typeof readEditDeviceDevicesDeviceIdEditGet>>>
export type ReadEditDeviceDevicesDeviceIdEditGetQueryError = HTTPValidationError

/**
 * @summary Read Edit Device
 */
export const useReadEditDeviceDevicesDeviceIdEditGet = <TError = HTTPValidationError>(
  deviceId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof readEditDeviceDevicesDeviceIdEditGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(deviceId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getReadEditDeviceDevicesDeviceIdEditGetKey(deviceId) : null);
  const swrFn = () => readEditDeviceDevicesDeviceIdEditGet(deviceId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Edit Device
 */
export const editDeviceDevicesDeviceIdEditPost = (
    deviceId: string,
    bodyEditDeviceDevicesDeviceIdEditPost: BodyEditDeviceDevicesDeviceIdEditPost,
 options?: SecondParameter<typeof axiosInstance>) => {const formUrlEncoded = new URLSearchParams();
formUrlEncoded.append(`device_name`, bodyEditDeviceDevicesDeviceIdEditPost.device_name)
if(bodyEditDeviceDevicesDeviceIdEditPost.device_uuid !== undefined && bodyEditDeviceDevicesDeviceIdEditPost.device_uuid !== null) {
 formUrlEncoded.append(`device_uuid`, bodyEditDeviceDevicesDeviceIdEditPost.device_uuid)
 }

    return axiosInstance<string>(
    {url: `/devices/${deviceId}/edit`, method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded
    },
    options);
  }



export const getEditDeviceDevicesDeviceIdEditPostMutationFetcher = (deviceId: string, options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, { arg }: { arg: BodyEditDeviceDevicesDeviceIdEditPost }) => {
    return editDeviceDevicesDeviceIdEditPost(deviceId, arg, options);
  }
}
export const getEditDeviceDevicesDeviceIdEditPostMutationKey = (deviceId: string,) => [`/devices/${deviceId}/edit`] as const;

export type EditDeviceDevicesDeviceIdEditPostMutationResult = NonNullable<Awaited<ReturnType<typeof editDeviceDevicesDeviceIdEditPost>>>
export type EditDeviceDevicesDeviceIdEditPostMutationError = HTTPValidationError

/**
 * @summary Edit Device
 */
export const useEditDeviceDevicesDeviceIdEditPost = <TError = HTTPValidationError>(
  deviceId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof editDeviceDevicesDeviceIdEditPost>>, TError, Key, BodyEditDeviceDevicesDeviceIdEditPost, Awaited<ReturnType<typeof editDeviceDevicesDeviceIdEditPost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getEditDeviceDevicesDeviceIdEditPostMutationKey(deviceId);
  const swrFn = getEditDeviceDevicesDeviceIdEditPostMutationFetcher(deviceId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Delete Device
 */
export const deleteDeviceDevicesDeviceIdDeletePost = (
    deviceId: string,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<string>(
    {url: `/devices/${deviceId}/delete`, method: 'POST'
    },
    options);
  }



export const getDeleteDeviceDevicesDeviceIdDeletePostMutationFetcher = (deviceId: string, options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, __: { arg: Arguments }) => {
    return deleteDeviceDevicesDeviceIdDeletePost(deviceId, options);
  }
}
export const getDeleteDeviceDevicesDeviceIdDeletePostMutationKey = (deviceId: string,) => [`/devices/${deviceId}/delete`] as const;

export type DeleteDeviceDevicesDeviceIdDeletePostMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDeviceDevicesDeviceIdDeletePost>>>
export type DeleteDeviceDevicesDeviceIdDeletePostMutationError = HTTPValidationError

/**
 * @summary Delete Device
 */
export const useDeleteDeviceDevicesDeviceIdDeletePost = <TError = HTTPValidationError>(
  deviceId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteDeviceDevicesDeviceIdDeletePost>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteDeviceDevicesDeviceIdDeletePost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteDeviceDevicesDeviceIdDeletePostMutationKey(deviceId);
  const swrFn = getDeleteDeviceDevicesDeviceIdDeletePostMutationFetcher(deviceId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Device Action
 */
export const deviceActionDevicesDeviceIdActionActionPost = (
    deviceId: string,
    action: string,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<string>(
    {url: `/devices/${deviceId}/action/${action}`, method: 'POST'
    },
    options);
  }



export const getDeviceActionDevicesDeviceIdActionActionPostMutationFetcher = (deviceId: string,
    action: string, options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, __: { arg: Arguments }) => {
    return deviceActionDevicesDeviceIdActionActionPost(deviceId, action, options);
  }
}
export const getDeviceActionDevicesDeviceIdActionActionPostMutationKey = (deviceId: string,
    action: string,) => [`/devices/${deviceId}/action/${action}`] as const;

export type DeviceActionDevicesDeviceIdActionActionPostMutationResult = NonNullable<Awaited<ReturnType<typeof deviceActionDevicesDeviceIdActionActionPost>>>
export type DeviceActionDevicesDeviceIdActionActionPostMutationError = HTTPValidationError

/**
 * @summary Device Action
 */
export const useDeviceActionDevicesDeviceIdActionActionPost = <TError = HTTPValidationError>(
  deviceId: string,
    action: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deviceActionDevicesDeviceIdActionActionPost>>, TError, Key, Arguments, Awaited<ReturnType<typeof deviceActionDevicesDeviceIdActionActionPost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeviceActionDevicesDeviceIdActionActionPostMutationKey(deviceId,action);
  const swrFn = getDeviceActionDevicesDeviceIdActionActionPostMutationFetcher(deviceId,action, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Read Traces
 */
export const readTracesTracesGet = (
    
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<string>(
    {url: `/traces`, method: 'GET'
    },
    options);
  }



export const getReadTracesTracesGetKey = () => [`/traces`] as const;

export type ReadTracesTracesGetQueryResult = NonNullable<Awaited<ReturnType<typeof readTracesTracesGet>>>
export type ReadTracesTracesGetQueryError = unknown

/**
 * @summary Read Traces
 */
export const useReadTracesTracesGet = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof readTracesTracesGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getReadTracesTracesGetKey() : null);
  const swrFn = () => readTracesTracesGet(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Read Add Trace
 */
export const readAddTraceTracesAddGet = (
    
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<string>(
    {url: `/traces/add`, method: 'GET'
    },
    options);
  }



export const getReadAddTraceTracesAddGetKey = () => [`/traces/add`] as const;

export type ReadAddTraceTracesAddGetQueryResult = NonNullable<Awaited<ReturnType<typeof readAddTraceTracesAddGet>>>
export type ReadAddTraceTracesAddGetQueryError = unknown

/**
 * @summary Read Add Trace
 */
export const useReadAddTraceTracesAddGet = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof readAddTraceTracesAddGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getReadAddTraceTracesAddGetKey() : null);
  const swrFn = () => readAddTraceTracesAddGet(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Add Trace
 */
export const addTraceTracesAddPost = (
    bodyAddTraceTracesAddPost: BodyAddTraceTracesAddPost,
 options?: SecondParameter<typeof axiosInstance>) => {const formData = new FormData();
formData.append(`trace_name`, bodyAddTraceTracesAddPost.trace_name)
formData.append(`device_id`, bodyAddTraceTracesAddPost.device_id)
formData.append(`trace_timestamp`, bodyAddTraceTracesAddPost.trace_timestamp)
formData.append(`trace_file`, bodyAddTraceTracesAddPost.trace_file)

    return axiosInstance<string>(
    {url: `/traces/add`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
    options);
  }



export const getAddTraceTracesAddPostMutationFetcher = ( options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, { arg }: { arg: BodyAddTraceTracesAddPost }) => {
    return addTraceTracesAddPost(arg, options);
  }
}
export const getAddTraceTracesAddPostMutationKey = () => [`/traces/add`] as const;

export type AddTraceTracesAddPostMutationResult = NonNullable<Awaited<ReturnType<typeof addTraceTracesAddPost>>>
export type AddTraceTracesAddPostMutationError = HTTPValidationError

/**
 * @summary Add Trace
 */
export const useAddTraceTracesAddPost = <TError = HTTPValidationError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof addTraceTracesAddPost>>, TError, Key, BodyAddTraceTracesAddPost, Awaited<ReturnType<typeof addTraceTracesAddPost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAddTraceTracesAddPostMutationKey();
  const swrFn = getAddTraceTracesAddPostMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Read Trace
 */
export const readTraceTracesTraceIdGet = (
    traceId: string,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<string>(
    {url: `/traces/${traceId}`, method: 'GET'
    },
    options);
  }



export const getReadTraceTracesTraceIdGetKey = (traceId: string,) => [`/traces/${traceId}`] as const;

export type ReadTraceTracesTraceIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof readTraceTracesTraceIdGet>>>
export type ReadTraceTracesTraceIdGetQueryError = HTTPValidationError

/**
 * @summary Read Trace
 */
export const useReadTraceTracesTraceIdGet = <TError = HTTPValidationError>(
  traceId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof readTraceTracesTraceIdGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(traceId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getReadTraceTracesTraceIdGetKey(traceId) : null);
  const swrFn = () => readTraceTracesTraceIdGet(traceId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Download Trace
 */
export const downloadTraceTracesTraceIdDownloadGet = (
    traceId: string,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<string>(
    {url: `/traces/${traceId}/download`, method: 'GET'
    },
    options);
  }



export const getDownloadTraceTracesTraceIdDownloadGetKey = (traceId: string,) => [`/traces/${traceId}/download`] as const;

export type DownloadTraceTracesTraceIdDownloadGetQueryResult = NonNullable<Awaited<ReturnType<typeof downloadTraceTracesTraceIdDownloadGet>>>
export type DownloadTraceTracesTraceIdDownloadGetQueryError = HTTPValidationError

/**
 * @summary Download Trace
 */
export const useDownloadTraceTracesTraceIdDownloadGet = <TError = HTTPValidationError>(
  traceId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof downloadTraceTracesTraceIdDownloadGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(traceId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getDownloadTraceTracesTraceIdDownloadGetKey(traceId) : null);
  const swrFn = () => downloadTraceTracesTraceIdDownloadGet(traceId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Execute Query
 */
export const executeQueryTracesTraceIdQueryQueryIdGet = (
    traceId: string,
    queryId: string,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<string>(
    {url: `/traces/${traceId}/query/${queryId}`, method: 'GET'
    },
    options);
  }



export const getExecuteQueryTracesTraceIdQueryQueryIdGetKey = (traceId: string,
    queryId: string,) => [`/traces/${traceId}/query/${queryId}`] as const;

export type ExecuteQueryTracesTraceIdQueryQueryIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof executeQueryTracesTraceIdQueryQueryIdGet>>>
export type ExecuteQueryTracesTraceIdQueryQueryIdGetQueryError = HTTPValidationError

/**
 * @summary Execute Query
 */
export const useExecuteQueryTracesTraceIdQueryQueryIdGet = <TError = HTTPValidationError>(
  traceId: string,
    queryId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof executeQueryTracesTraceIdQueryQueryIdGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(traceId && queryId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getExecuteQueryTracesTraceIdQueryQueryIdGetKey(traceId,queryId) : null);
  const swrFn = () => executeQueryTracesTraceIdQueryQueryIdGet(traceId,queryId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Get Query Data
 */
export const getQueryDataTracesTraceIdQueryQueryIdDataPost = (
    traceId: string,
    queryId: string,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<unknown>(
    {url: `/traces/${traceId}/query/${queryId}/data`, method: 'POST'
    },
    options);
  }



export const getGetQueryDataTracesTraceIdQueryQueryIdDataPostMutationFetcher = (traceId: string,
    queryId: string, options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, __: { arg: Arguments }) => {
    return getQueryDataTracesTraceIdQueryQueryIdDataPost(traceId, queryId, options);
  }
}
export const getGetQueryDataTracesTraceIdQueryQueryIdDataPostMutationKey = (traceId: string,
    queryId: string,) => [`/traces/${traceId}/query/${queryId}/data`] as const;

export type GetQueryDataTracesTraceIdQueryQueryIdDataPostMutationResult = NonNullable<Awaited<ReturnType<typeof getQueryDataTracesTraceIdQueryQueryIdDataPost>>>
export type GetQueryDataTracesTraceIdQueryQueryIdDataPostMutationError = HTTPValidationError

/**
 * @summary Get Query Data
 */
export const useGetQueryDataTracesTraceIdQueryQueryIdDataPost = <TError = HTTPValidationError>(
  traceId: string,
    queryId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof getQueryDataTracesTraceIdQueryQueryIdDataPost>>, TError, Key, Arguments, Awaited<ReturnType<typeof getQueryDataTracesTraceIdQueryQueryIdDataPost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getGetQueryDataTracesTraceIdQueryQueryIdDataPostMutationKey(traceId,queryId);
  const swrFn = getGetQueryDataTracesTraceIdQueryQueryIdDataPostMutationFetcher(traceId,queryId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Delete Trace
 */
export const deleteTraceTracesTraceIdDeletePost = (
    traceId: string,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<string>(
    {url: `/traces/${traceId}/delete`, method: 'POST'
    },
    options);
  }



export const getDeleteTraceTracesTraceIdDeletePostMutationFetcher = (traceId: string, options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, __: { arg: Arguments }) => {
    return deleteTraceTracesTraceIdDeletePost(traceId, options);
  }
}
export const getDeleteTraceTracesTraceIdDeletePostMutationKey = (traceId: string,) => [`/traces/${traceId}/delete`] as const;

export type DeleteTraceTracesTraceIdDeletePostMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTraceTracesTraceIdDeletePost>>>
export type DeleteTraceTracesTraceIdDeletePostMutationError = HTTPValidationError

/**
 * @summary Delete Trace
 */
export const useDeleteTraceTracesTraceIdDeletePost = <TError = HTTPValidationError>(
  traceId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteTraceTracesTraceIdDeletePost>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteTraceTracesTraceIdDeletePost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteTraceTracesTraceIdDeletePostMutationKey(traceId);
  const swrFn = getDeleteTraceTracesTraceIdDeletePostMutationFetcher(traceId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Read Queries
 */
export const readQueriesQueriesGet = (
    
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<string>(
    {url: `/queries`, method: 'GET'
    },
    options);
  }



export const getReadQueriesQueriesGetKey = () => [`/queries`] as const;

export type ReadQueriesQueriesGetQueryResult = NonNullable<Awaited<ReturnType<typeof readQueriesQueriesGet>>>
export type ReadQueriesQueriesGetQueryError = unknown

/**
 * @summary Read Queries
 */
export const useReadQueriesQueriesGet = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof readQueriesQueriesGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getReadQueriesQueriesGetKey() : null);
  const swrFn = () => readQueriesQueriesGet(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Read Add Query
 */
export const readAddQueryQueriesAddGet = (
    
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<string>(
    {url: `/queries/add`, method: 'GET'
    },
    options);
  }



export const getReadAddQueryQueriesAddGetKey = () => [`/queries/add`] as const;

export type ReadAddQueryQueriesAddGetQueryResult = NonNullable<Awaited<ReturnType<typeof readAddQueryQueriesAddGet>>>
export type ReadAddQueryQueriesAddGetQueryError = unknown

/**
 * @summary Read Add Query
 */
export const useReadAddQueryQueriesAddGet = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof readAddQueryQueriesAddGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getReadAddQueryQueriesAddGetKey() : null);
  const swrFn = () => readAddQueryQueriesAddGet(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Add Query
 */
export const addQueryQueriesAddPost = (
    bodyAddQueryQueriesAddPost: BodyAddQueryQueriesAddPost,
 options?: SecondParameter<typeof axiosInstance>) => {const formUrlEncoded = new URLSearchParams();
formUrlEncoded.append(`query_name`, bodyAddQueryQueriesAddPost.query_name)
formUrlEncoded.append(`query_text`, bodyAddQueryQueriesAddPost.query_text)
if(bodyAddQueryQueriesAddPost.redirect_to !== undefined) {
 formUrlEncoded.append(`redirect_to`, bodyAddQueryQueriesAddPost.redirect_to)
 }

    return axiosInstance<string>(
    {url: `/queries/add`, method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded
    },
    options);
  }



export const getAddQueryQueriesAddPostMutationFetcher = ( options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, { arg }: { arg: BodyAddQueryQueriesAddPost }) => {
    return addQueryQueriesAddPost(arg, options);
  }
}
export const getAddQueryQueriesAddPostMutationKey = () => [`/queries/add`] as const;

export type AddQueryQueriesAddPostMutationResult = NonNullable<Awaited<ReturnType<typeof addQueryQueriesAddPost>>>
export type AddQueryQueriesAddPostMutationError = HTTPValidationError

/**
 * @summary Add Query
 */
export const useAddQueryQueriesAddPost = <TError = HTTPValidationError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof addQueryQueriesAddPost>>, TError, Key, BodyAddQueryQueriesAddPost, Awaited<ReturnType<typeof addQueryQueriesAddPost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAddQueryQueriesAddPostMutationKey();
  const swrFn = getAddQueryQueriesAddPostMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Read Edit Query
 */
export const readEditQueryQueriesQueryIdEditGet = (
    queryId: string,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<string>(
    {url: `/queries/${queryId}/edit`, method: 'GET'
    },
    options);
  }



export const getReadEditQueryQueriesQueryIdEditGetKey = (queryId: string,) => [`/queries/${queryId}/edit`] as const;

export type ReadEditQueryQueriesQueryIdEditGetQueryResult = NonNullable<Awaited<ReturnType<typeof readEditQueryQueriesQueryIdEditGet>>>
export type ReadEditQueryQueriesQueryIdEditGetQueryError = HTTPValidationError

/**
 * @summary Read Edit Query
 */
export const useReadEditQueryQueriesQueryIdEditGet = <TError = HTTPValidationError>(
  queryId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof readEditQueryQueriesQueryIdEditGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(queryId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getReadEditQueryQueriesQueryIdEditGetKey(queryId) : null);
  const swrFn = () => readEditQueryQueriesQueryIdEditGet(queryId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Edit Query
 */
export const editQueryQueriesQueryIdEditPost = (
    queryId: string,
    bodyEditQueryQueriesQueryIdEditPost: BodyEditQueryQueriesQueryIdEditPost,
 options?: SecondParameter<typeof axiosInstance>) => {const formUrlEncoded = new URLSearchParams();
formUrlEncoded.append(`query_name`, bodyEditQueryQueriesQueryIdEditPost.query_name)
formUrlEncoded.append(`query_text`, bodyEditQueryQueriesQueryIdEditPost.query_text)

    return axiosInstance<string>(
    {url: `/queries/${queryId}/edit`, method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded
    },
    options);
  }



export const getEditQueryQueriesQueryIdEditPostMutationFetcher = (queryId: string, options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, { arg }: { arg: BodyEditQueryQueriesQueryIdEditPost }) => {
    return editQueryQueriesQueryIdEditPost(queryId, arg, options);
  }
}
export const getEditQueryQueriesQueryIdEditPostMutationKey = (queryId: string,) => [`/queries/${queryId}/edit`] as const;

export type EditQueryQueriesQueryIdEditPostMutationResult = NonNullable<Awaited<ReturnType<typeof editQueryQueriesQueryIdEditPost>>>
export type EditQueryQueriesQueryIdEditPostMutationError = HTTPValidationError

/**
 * @summary Edit Query
 */
export const useEditQueryQueriesQueryIdEditPost = <TError = HTTPValidationError>(
  queryId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof editQueryQueriesQueryIdEditPost>>, TError, Key, BodyEditQueryQueriesQueryIdEditPost, Awaited<ReturnType<typeof editQueryQueriesQueryIdEditPost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getEditQueryQueriesQueryIdEditPostMutationKey(queryId);
  const swrFn = getEditQueryQueriesQueryIdEditPostMutationFetcher(queryId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Delete Query
 */
export const deleteQueryQueriesQueryIdDeletePost = (
    queryId: string,
    bodyDeleteQueryQueriesQueryIdDeletePost: BodyDeleteQueryQueriesQueryIdDeletePost,
 options?: SecondParameter<typeof axiosInstance>) => {const formUrlEncoded = new URLSearchParams();
if(bodyDeleteQueryQueriesQueryIdDeletePost.redirect_to !== undefined) {
 formUrlEncoded.append(`redirect_to`, bodyDeleteQueryQueriesQueryIdDeletePost.redirect_to)
 }

    return axiosInstance<string>(
    {url: `/queries/${queryId}/delete`, method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded
    },
    options);
  }



export const getDeleteQueryQueriesQueryIdDeletePostMutationFetcher = (queryId: string, options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, { arg }: { arg: BodyDeleteQueryQueriesQueryIdDeletePost }) => {
    return deleteQueryQueriesQueryIdDeletePost(queryId, arg, options);
  }
}
export const getDeleteQueryQueriesQueryIdDeletePostMutationKey = (queryId: string,) => [`/queries/${queryId}/delete`] as const;

export type DeleteQueryQueriesQueryIdDeletePostMutationResult = NonNullable<Awaited<ReturnType<typeof deleteQueryQueriesQueryIdDeletePost>>>
export type DeleteQueryQueriesQueryIdDeletePostMutationError = HTTPValidationError

/**
 * @summary Delete Query
 */
export const useDeleteQueryQueriesQueryIdDeletePost = <TError = HTTPValidationError>(
  queryId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteQueryQueriesQueryIdDeletePost>>, TError, Key, BodyDeleteQueryQueriesQueryIdDeletePost, Awaited<ReturnType<typeof deleteQueryQueriesQueryIdDeletePost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteQueryQueriesQueryIdDeletePostMutationKey(queryId);
  const swrFn = getDeleteQueryQueriesQueryIdDeletePostMutationFetcher(queryId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Search Queries
 */
export const searchQueriesQueriesSearchGet = (
    params?: SearchQueriesQueriesSearchGetParams,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<unknown>(
    {url: `/queries/search`, method: 'GET',
        params
    },
    options);
  }



export const getSearchQueriesQueriesSearchGetKey = (params?: SearchQueriesQueriesSearchGetParams,) => [`/queries/search`, ...(params ? [params]: [])] as const;

export type SearchQueriesQueriesSearchGetQueryResult = NonNullable<Awaited<ReturnType<typeof searchQueriesQueriesSearchGet>>>
export type SearchQueriesQueriesSearchGetQueryError = HTTPValidationError

/**
 * @summary Search Queries
 */
export const useSearchQueriesQueriesSearchGet = <TError = HTTPValidationError>(
  params?: SearchQueriesQueriesSearchGetParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof searchQueriesQueriesSearchGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getSearchQueriesQueriesSearchGetKey(params) : null);
  const swrFn = () => searchQueriesQueriesSearchGet(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Edit Query Ajax
 */
export const editQueryAjaxQueriesQueryIdEditAjaxPost = (
    queryId: string,
    editQueryAjaxQueriesQueryIdEditAjaxPostBody: EditQueryAjaxQueriesQueryIdEditAjaxPostBody,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<unknown>(
    {url: `/queries/${queryId}/edit_ajax`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: editQueryAjaxQueriesQueryIdEditAjaxPostBody
    },
    options);
  }



export const getEditQueryAjaxQueriesQueryIdEditAjaxPostMutationFetcher = (queryId: string, options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, { arg }: { arg: EditQueryAjaxQueriesQueryIdEditAjaxPostBody }) => {
    return editQueryAjaxQueriesQueryIdEditAjaxPost(queryId, arg, options);
  }
}
export const getEditQueryAjaxQueriesQueryIdEditAjaxPostMutationKey = (queryId: string,) => [`/queries/${queryId}/edit_ajax`] as const;

export type EditQueryAjaxQueriesQueryIdEditAjaxPostMutationResult = NonNullable<Awaited<ReturnType<typeof editQueryAjaxQueriesQueryIdEditAjaxPost>>>
export type EditQueryAjaxQueriesQueryIdEditAjaxPostMutationError = HTTPValidationError

/**
 * @summary Edit Query Ajax
 */
export const useEditQueryAjaxQueriesQueryIdEditAjaxPost = <TError = HTTPValidationError>(
  queryId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof editQueryAjaxQueriesQueryIdEditAjaxPost>>, TError, Key, EditQueryAjaxQueriesQueryIdEditAjaxPostBody, Awaited<ReturnType<typeof editQueryAjaxQueriesQueryIdEditAjaxPost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getEditQueryAjaxQueriesQueryIdEditAjaxPostMutationKey(queryId);
  const swrFn = getEditQueryAjaxQueriesQueryIdEditAjaxPostMutationFetcher(queryId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Read Configs
 */
export const readConfigsConfigsGet = (
    
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<string>(
    {url: `/configs`, method: 'GET'
    },
    options);
  }



export const getReadConfigsConfigsGetKey = () => [`/configs`] as const;

export type ReadConfigsConfigsGetQueryResult = NonNullable<Awaited<ReturnType<typeof readConfigsConfigsGet>>>
export type ReadConfigsConfigsGetQueryError = unknown

/**
 * @summary Read Configs
 */
export const useReadConfigsConfigsGet = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof readConfigsConfigsGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getReadConfigsConfigsGetKey() : null);
  const swrFn = () => readConfigsConfigsGet(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Read Add Config
 */
export const readAddConfigConfigsAddGet = (
    
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<string>(
    {url: `/configs/add`, method: 'GET'
    },
    options);
  }



export const getReadAddConfigConfigsAddGetKey = () => [`/configs/add`] as const;

export type ReadAddConfigConfigsAddGetQueryResult = NonNullable<Awaited<ReturnType<typeof readAddConfigConfigsAddGet>>>
export type ReadAddConfigConfigsAddGetQueryError = unknown

/**
 * @summary Read Add Config
 */
export const useReadAddConfigConfigsAddGet = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof readAddConfigConfigsAddGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getReadAddConfigConfigsAddGetKey() : null);
  const swrFn = () => readAddConfigConfigsAddGet(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Add Config
 */
export const addConfigConfigsAddPost = (
    bodyAddConfigConfigsAddPost: BodyAddConfigConfigsAddPost,
 options?: SecondParameter<typeof axiosInstance>) => {const formUrlEncoded = new URLSearchParams();
formUrlEncoded.append(`config_name`, bodyAddConfigConfigsAddPost.config_name)
formUrlEncoded.append(`config_text`, bodyAddConfigConfigsAddPost.config_text)

    return axiosInstance<string>(
    {url: `/configs/add`, method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded
    },
    options);
  }



export const getAddConfigConfigsAddPostMutationFetcher = ( options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, { arg }: { arg: BodyAddConfigConfigsAddPost }) => {
    return addConfigConfigsAddPost(arg, options);
  }
}
export const getAddConfigConfigsAddPostMutationKey = () => [`/configs/add`] as const;

export type AddConfigConfigsAddPostMutationResult = NonNullable<Awaited<ReturnType<typeof addConfigConfigsAddPost>>>
export type AddConfigConfigsAddPostMutationError = HTTPValidationError

/**
 * @summary Add Config
 */
export const useAddConfigConfigsAddPost = <TError = HTTPValidationError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof addConfigConfigsAddPost>>, TError, Key, BodyAddConfigConfigsAddPost, Awaited<ReturnType<typeof addConfigConfigsAddPost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAddConfigConfigsAddPostMutationKey();
  const swrFn = getAddConfigConfigsAddPostMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Read Config
 */
export const readConfigConfigsConfigIdGet = (
    configId: string,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<string>(
    {url: `/configs/${configId}`, method: 'GET'
    },
    options);
  }



export const getReadConfigConfigsConfigIdGetKey = (configId: string,) => [`/configs/${configId}`] as const;

export type ReadConfigConfigsConfigIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof readConfigConfigsConfigIdGet>>>
export type ReadConfigConfigsConfigIdGetQueryError = HTTPValidationError

/**
 * @summary Read Config
 */
export const useReadConfigConfigsConfigIdGet = <TError = HTTPValidationError>(
  configId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof readConfigConfigsConfigIdGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(configId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getReadConfigConfigsConfigIdGetKey(configId) : null);
  const swrFn = () => readConfigConfigsConfigIdGet(configId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Edit Config
 */
export const editConfigConfigsConfigIdEditPost = (
    configId: string,
    bodyEditConfigConfigsConfigIdEditPost: BodyEditConfigConfigsConfigIdEditPost,
 options?: SecondParameter<typeof axiosInstance>) => {const formUrlEncoded = new URLSearchParams();
formUrlEncoded.append(`config_name`, bodyEditConfigConfigsConfigIdEditPost.config_name)
formUrlEncoded.append(`config_text`, bodyEditConfigConfigsConfigIdEditPost.config_text)

    return axiosInstance<string>(
    {url: `/configs/${configId}/edit`, method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded
    },
    options);
  }



export const getEditConfigConfigsConfigIdEditPostMutationFetcher = (configId: string, options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, { arg }: { arg: BodyEditConfigConfigsConfigIdEditPost }) => {
    return editConfigConfigsConfigIdEditPost(configId, arg, options);
  }
}
export const getEditConfigConfigsConfigIdEditPostMutationKey = (configId: string,) => [`/configs/${configId}/edit`] as const;

export type EditConfigConfigsConfigIdEditPostMutationResult = NonNullable<Awaited<ReturnType<typeof editConfigConfigsConfigIdEditPost>>>
export type EditConfigConfigsConfigIdEditPostMutationError = HTTPValidationError

/**
 * @summary Edit Config
 */
export const useEditConfigConfigsConfigIdEditPost = <TError = HTTPValidationError>(
  configId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof editConfigConfigsConfigIdEditPost>>, TError, Key, BodyEditConfigConfigsConfigIdEditPost, Awaited<ReturnType<typeof editConfigConfigsConfigIdEditPost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getEditConfigConfigsConfigIdEditPostMutationKey(configId);
  const swrFn = getEditConfigConfigsConfigIdEditPostMutationFetcher(configId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Delete Config
 */
export const deleteConfigConfigsConfigIdDeletePost = (
    configId: string,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<string>(
    {url: `/configs/${configId}/delete`, method: 'POST'
    },
    options);
  }



export const getDeleteConfigConfigsConfigIdDeletePostMutationFetcher = (configId: string, options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, __: { arg: Arguments }) => {
    return deleteConfigConfigsConfigIdDeletePost(configId, options);
  }
}
export const getDeleteConfigConfigsConfigIdDeletePostMutationKey = (configId: string,) => [`/configs/${configId}/delete`] as const;

export type DeleteConfigConfigsConfigIdDeletePostMutationResult = NonNullable<Awaited<ReturnType<typeof deleteConfigConfigsConfigIdDeletePost>>>
export type DeleteConfigConfigsConfigIdDeletePostMutationError = HTTPValidationError

/**
 * @summary Delete Config
 */
export const useDeleteConfigConfigsConfigIdDeletePost = <TError = HTTPValidationError>(
  configId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteConfigConfigsConfigIdDeletePost>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteConfigConfigsConfigIdDeletePost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteConfigConfigsConfigIdDeletePostMutationKey(configId);
  const swrFn = getDeleteConfigConfigsConfigIdDeletePostMutationFetcher(configId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * View job result page with SSE updates
 * @summary View Job Result
 */
export const viewJobResultJobsJobIdGet = (
    jobId: string,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<string>(
    {url: `/jobs/${jobId}`, method: 'GET'
    },
    options);
  }



export const getViewJobResultJobsJobIdGetKey = (jobId: string,) => [`/jobs/${jobId}`] as const;

export type ViewJobResultJobsJobIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof viewJobResultJobsJobIdGet>>>
export type ViewJobResultJobsJobIdGetQueryError = HTTPValidationError

/**
 * @summary View Job Result
 */
export const useViewJobResultJobsJobIdGet = <TError = HTTPValidationError>(
  jobId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof viewJobResultJobsJobIdGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(jobId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getViewJobResultJobsJobIdGetKey(jobId) : null);
  const swrFn = () => viewJobResultJobsJobIdGet(jobId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Server-Sent Events endpoint for job updates
 * @summary Job Updates Stream
 */
export const jobUpdatesStreamJobsJobIdStreamGet = (
    jobId: string,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<unknown>(
    {url: `/jobs/${jobId}/stream`, method: 'GET'
    },
    options);
  }



export const getJobUpdatesStreamJobsJobIdStreamGetKey = (jobId: string,) => [`/jobs/${jobId}/stream`] as const;

export type JobUpdatesStreamJobsJobIdStreamGetQueryResult = NonNullable<Awaited<ReturnType<typeof jobUpdatesStreamJobsJobIdStreamGet>>>
export type JobUpdatesStreamJobsJobIdStreamGetQueryError = HTTPValidationError

/**
 * @summary Job Updates Stream
 */
export const useJobUpdatesStreamJobsJobIdStreamGet = <TError = HTTPValidationError>(
  jobId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof jobUpdatesStreamJobsJobIdStreamGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(jobId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getJobUpdatesStreamJobsJobIdStreamGetKey(jobId) : null);
  const swrFn = () => jobUpdatesStreamJobsJobIdStreamGet(jobId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Create a new job request
 * @summary Create Job Request
 */
export const createJobRequestJobsRunPost = (
    bodyCreateJobRequestJobsRunPost: BodyCreateJobRequestJobsRunPost,
 options?: SecondParameter<typeof axiosInstance>) => {const formUrlEncoded = new URLSearchParams();
formUrlEncoded.append(`config_id`, bodyCreateJobRequestJobsRunPost.config_id)
formUrlEncoded.append(`device_serials`, bodyCreateJobRequestJobsRunPost.device_serials)
if(bodyCreateJobRequestJobsRunPost.duration !== undefined) {
 formUrlEncoded.append(`duration`, bodyCreateJobRequestJobsRunPost.duration.toString())
 }
if(bodyCreateJobRequestJobsRunPost.redirect_url !== undefined) {
 formUrlEncoded.append(`redirect_url`, bodyCreateJobRequestJobsRunPost.redirect_url)
 }

    return axiosInstance<unknown>(
    {url: `/jobs/run`, method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded
    },
    options);
  }



export const getCreateJobRequestJobsRunPostMutationFetcher = ( options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, { arg }: { arg: BodyCreateJobRequestJobsRunPost }) => {
    return createJobRequestJobsRunPost(arg, options);
  }
}
export const getCreateJobRequestJobsRunPostMutationKey = () => [`/jobs/run`] as const;

export type CreateJobRequestJobsRunPostMutationResult = NonNullable<Awaited<ReturnType<typeof createJobRequestJobsRunPost>>>
export type CreateJobRequestJobsRunPostMutationError = HTTPValidationError

/**
 * @summary Create Job Request
 */
export const useCreateJobRequestJobsRunPost = <TError = HTTPValidationError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof createJobRequestJobsRunPost>>, TError, Key, BodyCreateJobRequestJobsRunPost, Awaited<ReturnType<typeof createJobRequestJobsRunPost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreateJobRequestJobsRunPostMutationKey();
  const swrFn = getCreateJobRequestJobsRunPostMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get all hosts
 * @summary Get Hosts
 */
export const getHostsV1ApiHostsGet = (
    
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<HostWithStatus[]>(
    {url: `/v1/api/hosts`, method: 'GET'
    },
    options);
  }



export const getGetHostsV1ApiHostsGetKey = () => [`/v1/api/hosts`] as const;

export type GetHostsV1ApiHostsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getHostsV1ApiHostsGet>>>
export type GetHostsV1ApiHostsGetQueryError = unknown

/**
 * @summary Get Hosts
 */
export const useGetHostsV1ApiHostsGet = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getHostsV1ApiHostsGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetHostsV1ApiHostsGetKey() : null);
  const swrFn = () => getHostsV1ApiHostsGet(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Delete a host by ID
 * @summary Delete Host
 */
export const deleteHostV1ApiHostsHostIdDeletePost = (
    hostId: string,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<unknown>(
    {url: `/v1/api/hosts/${hostId}/delete`, method: 'POST'
    },
    options);
  }



export const getDeleteHostV1ApiHostsHostIdDeletePostMutationFetcher = (hostId: string, options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, __: { arg: Arguments }) => {
    return deleteHostV1ApiHostsHostIdDeletePost(hostId, options);
  }
}
export const getDeleteHostV1ApiHostsHostIdDeletePostMutationKey = (hostId: string,) => [`/v1/api/hosts/${hostId}/delete`] as const;

export type DeleteHostV1ApiHostsHostIdDeletePostMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHostV1ApiHostsHostIdDeletePost>>>
export type DeleteHostV1ApiHostsHostIdDeletePostMutationError = HTTPValidationError

/**
 * @summary Delete Host
 */
export const useDeleteHostV1ApiHostsHostIdDeletePost = <TError = HTTPValidationError>(
  hostId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteHostV1ApiHostsHostIdDeletePost>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteHostV1ApiHostsHostIdDeletePost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteHostV1ApiHostsHostIdDeletePostMutationKey(hostId);
  const swrFn = getDeleteHostV1ApiHostsHostIdDeletePostMutationFetcher(hostId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get all devices with status information
 * @summary Get Devices
 */
export const getDevicesV1ApiDevicesGet = (
    
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<DeviceWithRedisInfo[]>(
    {url: `/v1/api/devices`, method: 'GET'
    },
    options);
  }



export const getGetDevicesV1ApiDevicesGetKey = () => [`/v1/api/devices`] as const;

export type GetDevicesV1ApiDevicesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getDevicesV1ApiDevicesGet>>>
export type GetDevicesV1ApiDevicesGetQueryError = unknown

/**
 * @summary Get Devices
 */
export const useGetDevicesV1ApiDevicesGet = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getDevicesV1ApiDevicesGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetDevicesV1ApiDevicesGetKey() : null);
  const swrFn = () => getDevicesV1ApiDevicesGet(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Create a new device
 * @summary Create Device
 */
export const createDeviceV1ApiDevicesPost = (
    deviceCreate: DeviceCreate,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<Device>(
    {url: `/v1/api/devices`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: deviceCreate
    },
    options);
  }



export const getCreateDeviceV1ApiDevicesPostMutationFetcher = ( options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, { arg }: { arg: DeviceCreate }) => {
    return createDeviceV1ApiDevicesPost(arg, options);
  }
}
export const getCreateDeviceV1ApiDevicesPostMutationKey = () => [`/v1/api/devices`] as const;

export type CreateDeviceV1ApiDevicesPostMutationResult = NonNullable<Awaited<ReturnType<typeof createDeviceV1ApiDevicesPost>>>
export type CreateDeviceV1ApiDevicesPostMutationError = HTTPValidationError

/**
 * @summary Create Device
 */
export const useCreateDeviceV1ApiDevicesPost = <TError = HTTPValidationError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof createDeviceV1ApiDevicesPost>>, TError, Key, DeviceCreate, Awaited<ReturnType<typeof createDeviceV1ApiDevicesPost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreateDeviceV1ApiDevicesPostMutationKey();
  const swrFn = getCreateDeviceV1ApiDevicesPostMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Edit an existing device
 * @summary Edit Device
 */
export const editDeviceV1ApiDevicesDeviceIdEditPost = (
    deviceId: string,
    deviceUpdate: DeviceUpdate,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<Device>(
    {url: `/v1/api/devices/${deviceId}/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: deviceUpdate
    },
    options);
  }



export const getEditDeviceV1ApiDevicesDeviceIdEditPostMutationFetcher = (deviceId: string, options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, { arg }: { arg: DeviceUpdate }) => {
    return editDeviceV1ApiDevicesDeviceIdEditPost(deviceId, arg, options);
  }
}
export const getEditDeviceV1ApiDevicesDeviceIdEditPostMutationKey = (deviceId: string,) => [`/v1/api/devices/${deviceId}/edit`] as const;

export type EditDeviceV1ApiDevicesDeviceIdEditPostMutationResult = NonNullable<Awaited<ReturnType<typeof editDeviceV1ApiDevicesDeviceIdEditPost>>>
export type EditDeviceV1ApiDevicesDeviceIdEditPostMutationError = HTTPValidationError

/**
 * @summary Edit Device
 */
export const useEditDeviceV1ApiDevicesDeviceIdEditPost = <TError = HTTPValidationError>(
  deviceId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof editDeviceV1ApiDevicesDeviceIdEditPost>>, TError, Key, DeviceUpdate, Awaited<ReturnType<typeof editDeviceV1ApiDevicesDeviceIdEditPost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getEditDeviceV1ApiDevicesDeviceIdEditPostMutationKey(deviceId);
  const swrFn = getEditDeviceV1ApiDevicesDeviceIdEditPostMutationFetcher(deviceId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Delete a device
 * @summary Delete Device
 */
export const deleteDeviceV1ApiDevicesDeviceIdDeletePost = (
    deviceId: string,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<unknown>(
    {url: `/v1/api/devices/${deviceId}/delete`, method: 'POST'
    },
    options);
  }



export const getDeleteDeviceV1ApiDevicesDeviceIdDeletePostMutationFetcher = (deviceId: string, options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, __: { arg: Arguments }) => {
    return deleteDeviceV1ApiDevicesDeviceIdDeletePost(deviceId, options);
  }
}
export const getDeleteDeviceV1ApiDevicesDeviceIdDeletePostMutationKey = (deviceId: string,) => [`/v1/api/devices/${deviceId}/delete`] as const;

export type DeleteDeviceV1ApiDevicesDeviceIdDeletePostMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDeviceV1ApiDevicesDeviceIdDeletePost>>>
export type DeleteDeviceV1ApiDevicesDeviceIdDeletePostMutationError = HTTPValidationError

/**
 * @summary Delete Device
 */
export const useDeleteDeviceV1ApiDevicesDeviceIdDeletePost = <TError = HTTPValidationError>(
  deviceId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteDeviceV1ApiDevicesDeviceIdDeletePost>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteDeviceV1ApiDevicesDeviceIdDeletePost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteDeviceV1ApiDevicesDeviceIdDeletePostMutationKey(deviceId);
  const swrFn = getDeleteDeviceV1ApiDevicesDeviceIdDeletePostMutationFetcher(deviceId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get all configurations
 * @summary Get Configurations
 */
export const getConfigurationsV1ApiConfigurationsGet = (
    
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<Config[]>(
    {url: `/v1/api/configurations`, method: 'GET'
    },
    options);
  }



export const getGetConfigurationsV1ApiConfigurationsGetKey = () => [`/v1/api/configurations`] as const;

export type GetConfigurationsV1ApiConfigurationsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getConfigurationsV1ApiConfigurationsGet>>>
export type GetConfigurationsV1ApiConfigurationsGetQueryError = unknown

/**
 * @summary Get Configurations
 */
export const useGetConfigurationsV1ApiConfigurationsGet = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getConfigurationsV1ApiConfigurationsGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetConfigurationsV1ApiConfigurationsGetKey() : null);
  const swrFn = () => getConfigurationsV1ApiConfigurationsGet(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Create a new configuration
 * @summary Create Configuration
 */
export const createConfigurationV1ApiConfigurationsPost = (
    configCreate: ConfigCreate,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<Config>(
    {url: `/v1/api/configurations`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: configCreate
    },
    options);
  }



export const getCreateConfigurationV1ApiConfigurationsPostMutationFetcher = ( options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, { arg }: { arg: ConfigCreate }) => {
    return createConfigurationV1ApiConfigurationsPost(arg, options);
  }
}
export const getCreateConfigurationV1ApiConfigurationsPostMutationKey = () => [`/v1/api/configurations`] as const;

export type CreateConfigurationV1ApiConfigurationsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createConfigurationV1ApiConfigurationsPost>>>
export type CreateConfigurationV1ApiConfigurationsPostMutationError = HTTPValidationError

/**
 * @summary Create Configuration
 */
export const useCreateConfigurationV1ApiConfigurationsPost = <TError = HTTPValidationError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof createConfigurationV1ApiConfigurationsPost>>, TError, Key, ConfigCreate, Awaited<ReturnType<typeof createConfigurationV1ApiConfigurationsPost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreateConfigurationV1ApiConfigurationsPostMutationKey();
  const swrFn = getCreateConfigurationV1ApiConfigurationsPostMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a specific configuration
 * @summary Get Configuration
 */
export const getConfigurationV1ApiConfigurationsConfigIdGet = (
    configId: string,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<Config>(
    {url: `/v1/api/configurations/${configId}`, method: 'GET'
    },
    options);
  }



export const getGetConfigurationV1ApiConfigurationsConfigIdGetKey = (configId: string,) => [`/v1/api/configurations/${configId}`] as const;

export type GetConfigurationV1ApiConfigurationsConfigIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getConfigurationV1ApiConfigurationsConfigIdGet>>>
export type GetConfigurationV1ApiConfigurationsConfigIdGetQueryError = HTTPValidationError

/**
 * @summary Get Configuration
 */
export const useGetConfigurationV1ApiConfigurationsConfigIdGet = <TError = HTTPValidationError>(
  configId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getConfigurationV1ApiConfigurationsConfigIdGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(configId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetConfigurationV1ApiConfigurationsConfigIdGetKey(configId) : null);
  const swrFn = () => getConfigurationV1ApiConfigurationsConfigIdGet(configId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Edit an existing configuration
 * @summary Edit Configuration
 */
export const editConfigurationV1ApiConfigurationsConfigIdEditPost = (
    configId: string,
    configUpdate: ConfigUpdate,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<Config>(
    {url: `/v1/api/configurations/${configId}/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: configUpdate
    },
    options);
  }



export const getEditConfigurationV1ApiConfigurationsConfigIdEditPostMutationFetcher = (configId: string, options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, { arg }: { arg: ConfigUpdate }) => {
    return editConfigurationV1ApiConfigurationsConfigIdEditPost(configId, arg, options);
  }
}
export const getEditConfigurationV1ApiConfigurationsConfigIdEditPostMutationKey = (configId: string,) => [`/v1/api/configurations/${configId}/edit`] as const;

export type EditConfigurationV1ApiConfigurationsConfigIdEditPostMutationResult = NonNullable<Awaited<ReturnType<typeof editConfigurationV1ApiConfigurationsConfigIdEditPost>>>
export type EditConfigurationV1ApiConfigurationsConfigIdEditPostMutationError = HTTPValidationError

/**
 * @summary Edit Configuration
 */
export const useEditConfigurationV1ApiConfigurationsConfigIdEditPost = <TError = HTTPValidationError>(
  configId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof editConfigurationV1ApiConfigurationsConfigIdEditPost>>, TError, Key, ConfigUpdate, Awaited<ReturnType<typeof editConfigurationV1ApiConfigurationsConfigIdEditPost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getEditConfigurationV1ApiConfigurationsConfigIdEditPostMutationKey(configId);
  const swrFn = getEditConfigurationV1ApiConfigurationsConfigIdEditPostMutationFetcher(configId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Delete a configuration
 * @summary Delete Configuration
 */
export const deleteConfigurationV1ApiConfigurationsConfigIdDeletePost = (
    configId: string,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<unknown>(
    {url: `/v1/api/configurations/${configId}/delete`, method: 'POST'
    },
    options);
  }



export const getDeleteConfigurationV1ApiConfigurationsConfigIdDeletePostMutationFetcher = (configId: string, options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, __: { arg: Arguments }) => {
    return deleteConfigurationV1ApiConfigurationsConfigIdDeletePost(configId, options);
  }
}
export const getDeleteConfigurationV1ApiConfigurationsConfigIdDeletePostMutationKey = (configId: string,) => [`/v1/api/configurations/${configId}/delete`] as const;

export type DeleteConfigurationV1ApiConfigurationsConfigIdDeletePostMutationResult = NonNullable<Awaited<ReturnType<typeof deleteConfigurationV1ApiConfigurationsConfigIdDeletePost>>>
export type DeleteConfigurationV1ApiConfigurationsConfigIdDeletePostMutationError = HTTPValidationError

/**
 * @summary Delete Configuration
 */
export const useDeleteConfigurationV1ApiConfigurationsConfigIdDeletePost = <TError = HTTPValidationError>(
  configId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteConfigurationV1ApiConfigurationsConfigIdDeletePost>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteConfigurationV1ApiConfigurationsConfigIdDeletePost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteConfigurationV1ApiConfigurationsConfigIdDeletePostMutationKey(configId);
  const swrFn = getDeleteConfigurationV1ApiConfigurationsConfigIdDeletePostMutationFetcher(configId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Get Configuration Traces
 */
export const getConfigurationTracesV1ApiConfigurationsConfigIdTracesGet = (
    configId: string,
    params?: GetConfigurationTracesV1ApiConfigurationsConfigIdTracesGetParams,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<SrcApiConfigurationsTraceWithDevice[]>(
    {url: `/v1/api/configurations/${configId}/traces`, method: 'GET',
        params
    },
    options);
  }



export const getGetConfigurationTracesV1ApiConfigurationsConfigIdTracesGetKey = (configId: string,
    params?: GetConfigurationTracesV1ApiConfigurationsConfigIdTracesGetParams,) => [`/v1/api/configurations/${configId}/traces`, ...(params ? [params]: [])] as const;

export type GetConfigurationTracesV1ApiConfigurationsConfigIdTracesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getConfigurationTracesV1ApiConfigurationsConfigIdTracesGet>>>
export type GetConfigurationTracesV1ApiConfigurationsConfigIdTracesGetQueryError = HTTPValidationError

/**
 * @summary Get Configuration Traces
 */
export const useGetConfigurationTracesV1ApiConfigurationsConfigIdTracesGet = <TError = HTTPValidationError>(
  configId: string,
    params?: GetConfigurationTracesV1ApiConfigurationsConfigIdTracesGetParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getConfigurationTracesV1ApiConfigurationsConfigIdTracesGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(configId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetConfigurationTracesV1ApiConfigurationsConfigIdTracesGetKey(configId,params) : null);
  const swrFn = () => getConfigurationTracesV1ApiConfigurationsConfigIdTracesGet(configId,params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get all traces with filtering and sorting
 * @summary Get Traces
 */
export const getTracesV1ApiTracesGet = (
    params?: GetTracesV1ApiTracesGetParams,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<SrcApiTracesTraceWithDevice[]>(
    {url: `/v1/api/traces`, method: 'GET',
        params
    },
    options);
  }



export const getGetTracesV1ApiTracesGetKey = (params?: GetTracesV1ApiTracesGetParams,) => [`/v1/api/traces`, ...(params ? [params]: [])] as const;

export type GetTracesV1ApiTracesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTracesV1ApiTracesGet>>>
export type GetTracesV1ApiTracesGetQueryError = HTTPValidationError

/**
 * @summary Get Traces
 */
export const useGetTracesV1ApiTracesGet = <TError = HTTPValidationError>(
  params?: GetTracesV1ApiTracesGetParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getTracesV1ApiTracesGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetTracesV1ApiTracesGetKey(params) : null);
  const swrFn = () => getTracesV1ApiTracesGet(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Create/upload a new trace. Accepts form-data with a file upload and metadata.

This endpoint is intentionally implemented with Form and File parameters
to ensure full OpenAPI compatibility for auto-generated clients on the frontend.
 * @summary Create Trace
 */
export const createTraceV1ApiTracesPost = (
    bodyCreateTraceV1ApiTracesPost: BodyCreateTraceV1ApiTracesPost,
 options?: SecondParameter<typeof axiosInstance>) => {const formData = new FormData();
formData.append(`trace_name`, bodyCreateTraceV1ApiTracesPost.trace_name)
formData.append(`trace_file`, bodyCreateTraceV1ApiTracesPost.trace_file)
formData.append(`trace_timestamp`, bodyCreateTraceV1ApiTracesPost.trace_timestamp)
if(bodyCreateTraceV1ApiTracesPost.configuration_id !== undefined && bodyCreateTraceV1ApiTracesPost.configuration_id !== null) {
 formData.append(`configuration_id`, bodyCreateTraceV1ApiTracesPost.configuration_id)
 }
if(bodyCreateTraceV1ApiTracesPost.device_id !== undefined && bodyCreateTraceV1ApiTracesPost.device_id !== null) {
 formData.append(`device_id`, bodyCreateTraceV1ApiTracesPost.device_id)
 }

    return axiosInstance<TraceDetail>(
    {url: `/v1/api/traces`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
    options);
  }



export const getCreateTraceV1ApiTracesPostMutationFetcher = ( options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, { arg }: { arg: BodyCreateTraceV1ApiTracesPost }) => {
    return createTraceV1ApiTracesPost(arg, options);
  }
}
export const getCreateTraceV1ApiTracesPostMutationKey = () => [`/v1/api/traces`] as const;

export type CreateTraceV1ApiTracesPostMutationResult = NonNullable<Awaited<ReturnType<typeof createTraceV1ApiTracesPost>>>
export type CreateTraceV1ApiTracesPostMutationError = HTTPValidationError

/**
 * @summary Create Trace
 */
export const useCreateTraceV1ApiTracesPost = <TError = HTTPValidationError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof createTraceV1ApiTracesPost>>, TError, Key, BodyCreateTraceV1ApiTracesPost, Awaited<ReturnType<typeof createTraceV1ApiTracesPost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreateTraceV1ApiTracesPostMutationKey();
  const swrFn = getCreateTraceV1ApiTracesPostMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a specific trace
 * @summary Get Trace
 */
export const getTraceV1ApiTracesTraceIdGet = (
    traceId: string,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<TraceDetail>(
    {url: `/v1/api/traces/${traceId}`, method: 'GET'
    },
    options);
  }



export const getGetTraceV1ApiTracesTraceIdGetKey = (traceId: string,) => [`/v1/api/traces/${traceId}`] as const;

export type GetTraceV1ApiTracesTraceIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTraceV1ApiTracesTraceIdGet>>>
export type GetTraceV1ApiTracesTraceIdGetQueryError = HTTPValidationError

/**
 * @summary Get Trace
 */
export const useGetTraceV1ApiTracesTraceIdGet = <TError = HTTPValidationError>(
  traceId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getTraceV1ApiTracesTraceIdGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(traceId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetTraceV1ApiTracesTraceIdGetKey(traceId) : null);
  const swrFn = () => getTraceV1ApiTracesTraceIdGet(traceId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Edit trace metadata
 * @summary Edit Trace
 */
export const editTraceV1ApiTracesTraceIdEditPost = (
    traceId: string,
    traceUpdate: TraceUpdate,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<TraceDetail>(
    {url: `/v1/api/traces/${traceId}/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: traceUpdate
    },
    options);
  }



export const getEditTraceV1ApiTracesTraceIdEditPostMutationFetcher = (traceId: string, options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, { arg }: { arg: TraceUpdate }) => {
    return editTraceV1ApiTracesTraceIdEditPost(traceId, arg, options);
  }
}
export const getEditTraceV1ApiTracesTraceIdEditPostMutationKey = (traceId: string,) => [`/v1/api/traces/${traceId}/edit`] as const;

export type EditTraceV1ApiTracesTraceIdEditPostMutationResult = NonNullable<Awaited<ReturnType<typeof editTraceV1ApiTracesTraceIdEditPost>>>
export type EditTraceV1ApiTracesTraceIdEditPostMutationError = HTTPValidationError

/**
 * @summary Edit Trace
 */
export const useEditTraceV1ApiTracesTraceIdEditPost = <TError = HTTPValidationError>(
  traceId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof editTraceV1ApiTracesTraceIdEditPost>>, TError, Key, TraceUpdate, Awaited<ReturnType<typeof editTraceV1ApiTracesTraceIdEditPost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getEditTraceV1ApiTracesTraceIdEditPostMutationKey(traceId);
  const swrFn = getEditTraceV1ApiTracesTraceIdEditPostMutationFetcher(traceId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Delete a trace
 * @summary Delete Trace
 */
export const deleteTraceV1ApiTracesTraceIdDeletePost = (
    traceId: string,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<unknown>(
    {url: `/v1/api/traces/${traceId}/delete`, method: 'POST'
    },
    options);
  }



export const getDeleteTraceV1ApiTracesTraceIdDeletePostMutationFetcher = (traceId: string, options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, __: { arg: Arguments }) => {
    return deleteTraceV1ApiTracesTraceIdDeletePost(traceId, options);
  }
}
export const getDeleteTraceV1ApiTracesTraceIdDeletePostMutationKey = (traceId: string,) => [`/v1/api/traces/${traceId}/delete`] as const;

export type DeleteTraceV1ApiTracesTraceIdDeletePostMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTraceV1ApiTracesTraceIdDeletePost>>>
export type DeleteTraceV1ApiTracesTraceIdDeletePostMutationError = HTTPValidationError

/**
 * @summary Delete Trace
 */
export const useDeleteTraceV1ApiTracesTraceIdDeletePost = <TError = HTTPValidationError>(
  traceId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteTraceV1ApiTracesTraceIdDeletePost>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteTraceV1ApiTracesTraceIdDeletePost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteTraceV1ApiTracesTraceIdDeletePostMutationKey(traceId);
  const swrFn = getDeleteTraceV1ApiTracesTraceIdDeletePostMutationFetcher(traceId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get all queries
 * @summary Get Queries
 */
export const getQueriesV1ApiQueriesGet = (
    
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<Query[]>(
    {url: `/v1/api/queries`, method: 'GET'
    },
    options);
  }



export const getGetQueriesV1ApiQueriesGetKey = () => [`/v1/api/queries`] as const;

export type GetQueriesV1ApiQueriesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getQueriesV1ApiQueriesGet>>>
export type GetQueriesV1ApiQueriesGetQueryError = unknown

/**
 * @summary Get Queries
 */
export const useGetQueriesV1ApiQueriesGet = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getQueriesV1ApiQueriesGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetQueriesV1ApiQueriesGetKey() : null);
  const swrFn = () => getQueriesV1ApiQueriesGet(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Create a new query
 * @summary Create Query
 */
export const createQueryV1ApiQueriesPost = (
    queryCreate: QueryCreate,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<Query>(
    {url: `/v1/api/queries`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: queryCreate
    },
    options);
  }



export const getCreateQueryV1ApiQueriesPostMutationFetcher = ( options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, { arg }: { arg: QueryCreate }) => {
    return createQueryV1ApiQueriesPost(arg, options);
  }
}
export const getCreateQueryV1ApiQueriesPostMutationKey = () => [`/v1/api/queries`] as const;

export type CreateQueryV1ApiQueriesPostMutationResult = NonNullable<Awaited<ReturnType<typeof createQueryV1ApiQueriesPost>>>
export type CreateQueryV1ApiQueriesPostMutationError = HTTPValidationError

/**
 * @summary Create Query
 */
export const useCreateQueryV1ApiQueriesPost = <TError = HTTPValidationError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof createQueryV1ApiQueriesPost>>, TError, Key, QueryCreate, Awaited<ReturnType<typeof createQueryV1ApiQueriesPost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreateQueryV1ApiQueriesPostMutationKey();
  const swrFn = getCreateQueryV1ApiQueriesPostMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a specific query
 * @summary Get Query
 */
export const getQueryV1ApiQueriesQueryIdGet = (
    queryId: string,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<Query>(
    {url: `/v1/api/queries/${queryId}`, method: 'GET'
    },
    options);
  }



export const getGetQueryV1ApiQueriesQueryIdGetKey = (queryId: string,) => [`/v1/api/queries/${queryId}`] as const;

export type GetQueryV1ApiQueriesQueryIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getQueryV1ApiQueriesQueryIdGet>>>
export type GetQueryV1ApiQueriesQueryIdGetQueryError = HTTPValidationError

/**
 * @summary Get Query
 */
export const useGetQueryV1ApiQueriesQueryIdGet = <TError = HTTPValidationError>(
  queryId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getQueryV1ApiQueriesQueryIdGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(queryId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetQueryV1ApiQueriesQueryIdGetKey(queryId) : null);
  const swrFn = () => getQueryV1ApiQueriesQueryIdGet(queryId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Edit an existing query
 * @summary Edit Query
 */
export const editQueryV1ApiQueriesQueryIdEditPost = (
    queryId: string,
    queryUpdate: QueryUpdate,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<Query>(
    {url: `/v1/api/queries/${queryId}/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: queryUpdate
    },
    options);
  }



export const getEditQueryV1ApiQueriesQueryIdEditPostMutationFetcher = (queryId: string, options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, { arg }: { arg: QueryUpdate }) => {
    return editQueryV1ApiQueriesQueryIdEditPost(queryId, arg, options);
  }
}
export const getEditQueryV1ApiQueriesQueryIdEditPostMutationKey = (queryId: string,) => [`/v1/api/queries/${queryId}/edit`] as const;

export type EditQueryV1ApiQueriesQueryIdEditPostMutationResult = NonNullable<Awaited<ReturnType<typeof editQueryV1ApiQueriesQueryIdEditPost>>>
export type EditQueryV1ApiQueriesQueryIdEditPostMutationError = HTTPValidationError

/**
 * @summary Edit Query
 */
export const useEditQueryV1ApiQueriesQueryIdEditPost = <TError = HTTPValidationError>(
  queryId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof editQueryV1ApiQueriesQueryIdEditPost>>, TError, Key, QueryUpdate, Awaited<ReturnType<typeof editQueryV1ApiQueriesQueryIdEditPost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getEditQueryV1ApiQueriesQueryIdEditPostMutationKey(queryId);
  const swrFn = getEditQueryV1ApiQueriesQueryIdEditPostMutationFetcher(queryId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Delete a query
 * @summary Delete Query
 */
export const deleteQueryV1ApiQueriesQueryIdDeletePost = (
    queryId: string,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<unknown>(
    {url: `/v1/api/queries/${queryId}/delete`, method: 'POST'
    },
    options);
  }



export const getDeleteQueryV1ApiQueriesQueryIdDeletePostMutationFetcher = (queryId: string, options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, __: { arg: Arguments }) => {
    return deleteQueryV1ApiQueriesQueryIdDeletePost(queryId, options);
  }
}
export const getDeleteQueryV1ApiQueriesQueryIdDeletePostMutationKey = (queryId: string,) => [`/v1/api/queries/${queryId}/delete`] as const;

export type DeleteQueryV1ApiQueriesQueryIdDeletePostMutationResult = NonNullable<Awaited<ReturnType<typeof deleteQueryV1ApiQueriesQueryIdDeletePost>>>
export type DeleteQueryV1ApiQueriesQueryIdDeletePostMutationError = HTTPValidationError

/**
 * @summary Delete Query
 */
export const useDeleteQueryV1ApiQueriesQueryIdDeletePost = <TError = HTTPValidationError>(
  queryId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteQueryV1ApiQueriesQueryIdDeletePost>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteQueryV1ApiQueriesQueryIdDeletePost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteQueryV1ApiQueriesQueryIdDeletePostMutationKey(queryId);
  const swrFn = getDeleteQueryV1ApiQueriesQueryIdDeletePostMutationFetcher(queryId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Export query results in various formats
 * @summary Export Result
 */
export const exportResultV1ApiResultsTraceIdQueryIdExportGet = (
    traceId: string,
    queryId: string,
    params: ExportResultV1ApiResultsTraceIdQueryIdExportGetParams,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<unknown>(
    {url: `/v1/api/results/${traceId}/${queryId}/export`, method: 'GET',
        params
    },
    options);
  }



export const getExportResultV1ApiResultsTraceIdQueryIdExportGetKey = (traceId: string,
    queryId: string,
    params: ExportResultV1ApiResultsTraceIdQueryIdExportGetParams,) => [`/v1/api/results/${traceId}/${queryId}/export`, ...(params ? [params]: [])] as const;

export type ExportResultV1ApiResultsTraceIdQueryIdExportGetQueryResult = NonNullable<Awaited<ReturnType<typeof exportResultV1ApiResultsTraceIdQueryIdExportGet>>>
export type ExportResultV1ApiResultsTraceIdQueryIdExportGetQueryError = HTTPValidationError

/**
 * @summary Export Result
 */
export const useExportResultV1ApiResultsTraceIdQueryIdExportGet = <TError = HTTPValidationError>(
  traceId: string,
    queryId: string,
    params: ExportResultV1ApiResultsTraceIdQueryIdExportGetParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof exportResultV1ApiResultsTraceIdQueryIdExportGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(traceId && queryId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getExportResultV1ApiResultsTraceIdQueryIdExportGetKey(traceId,queryId,params) : null);
  const swrFn = () => exportResultV1ApiResultsTraceIdQueryIdExportGet(traceId,queryId,params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get query results formatted for DataTables
 * @summary Get Datatables Result
 */
export const getDatatablesResultV1ApiResultsTraceIdQueryIdDatatablesGet = (
    traceId: string,
    queryId: string,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<unknown>(
    {url: `/v1/api/results/${traceId}/${queryId}/datatables`, method: 'GET'
    },
    options);
  }



export const getGetDatatablesResultV1ApiResultsTraceIdQueryIdDatatablesGetKey = (traceId: string,
    queryId: string,) => [`/v1/api/results/${traceId}/${queryId}/datatables`] as const;

export type GetDatatablesResultV1ApiResultsTraceIdQueryIdDatatablesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getDatatablesResultV1ApiResultsTraceIdQueryIdDatatablesGet>>>
export type GetDatatablesResultV1ApiResultsTraceIdQueryIdDatatablesGetQueryError = HTTPValidationError

/**
 * @summary Get Datatables Result
 */
export const useGetDatatablesResultV1ApiResultsTraceIdQueryIdDatatablesGet = <TError = HTTPValidationError>(
  traceId: string,
    queryId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getDatatablesResultV1ApiResultsTraceIdQueryIdDatatablesGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(traceId && queryId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetDatatablesResultV1ApiResultsTraceIdQueryIdDatatablesGetKey(traceId,queryId) : null);
  const swrFn = () => getDatatablesResultV1ApiResultsTraceIdQueryIdDatatablesGet(traceId,queryId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get query results as JSON
 * @summary Get Json Result
 */
export const getJsonResultV1ApiResultsTraceIdQueryIdJsonGet = (
    traceId: string,
    queryId: string,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<unknown>(
    {url: `/v1/api/results/${traceId}/${queryId}/json`, method: 'GET'
    },
    options);
  }



export const getGetJsonResultV1ApiResultsTraceIdQueryIdJsonGetKey = (traceId: string,
    queryId: string,) => [`/v1/api/results/${traceId}/${queryId}/json`] as const;

export type GetJsonResultV1ApiResultsTraceIdQueryIdJsonGetQueryResult = NonNullable<Awaited<ReturnType<typeof getJsonResultV1ApiResultsTraceIdQueryIdJsonGet>>>
export type GetJsonResultV1ApiResultsTraceIdQueryIdJsonGetQueryError = HTTPValidationError

/**
 * @summary Get Json Result
 */
export const useGetJsonResultV1ApiResultsTraceIdQueryIdJsonGet = <TError = HTTPValidationError>(
  traceId: string,
    queryId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getJsonResultV1ApiResultsTraceIdQueryIdJsonGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(traceId && queryId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetJsonResultV1ApiResultsTraceIdQueryIdJsonGetKey(traceId,queryId) : null);
  const swrFn = () => getJsonResultV1ApiResultsTraceIdQueryIdJsonGet(traceId,queryId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Create a new job request
 * @summary Create Job Request
 */
export const createJobRequestV1ApiRequestsPost = (
    jobRequestCreate: JobRequestCreate,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<JobRequestResponse>(
    {url: `/v1/api/requests`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: jobRequestCreate
    },
    options);
  }



export const getCreateJobRequestV1ApiRequestsPostMutationFetcher = ( options?: SecondParameter<typeof axiosInstance>) => {
  return (_: Key, { arg }: { arg: JobRequestCreate }) => {
    return createJobRequestV1ApiRequestsPost(arg, options);
  }
}
export const getCreateJobRequestV1ApiRequestsPostMutationKey = () => [`/v1/api/requests`] as const;

export type CreateJobRequestV1ApiRequestsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createJobRequestV1ApiRequestsPost>>>
export type CreateJobRequestV1ApiRequestsPostMutationError = HTTPValidationError

/**
 * @summary Create Job Request
 */
export const useCreateJobRequestV1ApiRequestsPost = <TError = HTTPValidationError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof createJobRequestV1ApiRequestsPost>>, TError, Key, JobRequestCreate, Awaited<ReturnType<typeof createJobRequestV1ApiRequestsPost>>> & { swrKey?: string }, request?: SecondParameter<typeof axiosInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreateJobRequestV1ApiRequestsPostMutationKey();
  const swrFn = getCreateJobRequestV1ApiRequestsPostMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get job request details
 * @summary Get Job Request
 */
export const getJobRequestV1ApiRequestsJobIdGet = (
    jobId: string,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<JobRequestResponse>(
    {url: `/v1/api/requests/${jobId}`, method: 'GET'
    },
    options);
  }



export const getGetJobRequestV1ApiRequestsJobIdGetKey = (jobId: string,) => [`/v1/api/requests/${jobId}`] as const;

export type GetJobRequestV1ApiRequestsJobIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getJobRequestV1ApiRequestsJobIdGet>>>
export type GetJobRequestV1ApiRequestsJobIdGetQueryError = HTTPValidationError

/**
 * @summary Get Job Request
 */
export const useGetJobRequestV1ApiRequestsJobIdGet = <TError = HTTPValidationError>(
  jobId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getJobRequestV1ApiRequestsJobIdGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(jobId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetJobRequestV1ApiRequestsJobIdGetKey(jobId) : null);
  const swrFn = () => getJobRequestV1ApiRequestsJobIdGet(jobId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Server-Sent Events stream for job updates
 * @summary Stream Job Updates
 */
export const streamJobUpdatesV1ApiRequestsJobIdStreamGet = (
    jobId: string,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<unknown>(
    {url: `/v1/api/requests/${jobId}/stream`, method: 'GET'
    },
    options);
  }



export const getStreamJobUpdatesV1ApiRequestsJobIdStreamGetKey = (jobId: string,) => [`/v1/api/requests/${jobId}/stream`] as const;

export type StreamJobUpdatesV1ApiRequestsJobIdStreamGetQueryResult = NonNullable<Awaited<ReturnType<typeof streamJobUpdatesV1ApiRequestsJobIdStreamGet>>>
export type StreamJobUpdatesV1ApiRequestsJobIdStreamGetQueryError = HTTPValidationError

/**
 * @summary Stream Job Updates
 */
export const useStreamJobUpdatesV1ApiRequestsJobIdStreamGet = <TError = HTTPValidationError>(
  jobId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof streamJobUpdatesV1ApiRequestsJobIdStreamGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(jobId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getStreamJobUpdatesV1ApiRequestsJobIdStreamGetKey(jobId) : null);
  const swrFn = () => streamJobUpdatesV1ApiRequestsJobIdStreamGet(jobId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Export query results in various formats
 * @summary Export Result
 */
export const exportResultV1ApiGroupResultsQueryIdExportGet = (
    queryId: string,
    params: ExportResultV1ApiGroupResultsQueryIdExportGetParams,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<unknown>(
    {url: `/v1/api/group_results/${queryId}/export`, method: 'GET',
        params
    },
    options);
  }



export const getExportResultV1ApiGroupResultsQueryIdExportGetKey = (queryId: string,
    params: ExportResultV1ApiGroupResultsQueryIdExportGetParams,) => [`/v1/api/group_results/${queryId}/export`, ...(params ? [params]: [])] as const;

export type ExportResultV1ApiGroupResultsQueryIdExportGetQueryResult = NonNullable<Awaited<ReturnType<typeof exportResultV1ApiGroupResultsQueryIdExportGet>>>
export type ExportResultV1ApiGroupResultsQueryIdExportGetQueryError = HTTPValidationError

/**
 * @summary Export Result
 */
export const useExportResultV1ApiGroupResultsQueryIdExportGet = <TError = HTTPValidationError>(
  queryId: string,
    params: ExportResultV1ApiGroupResultsQueryIdExportGetParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof exportResultV1ApiGroupResultsQueryIdExportGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(queryId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getExportResultV1ApiGroupResultsQueryIdExportGetKey(queryId,params) : null);
  const swrFn = () => exportResultV1ApiGroupResultsQueryIdExportGet(queryId,params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get query results formatted for DataTables
 * @summary Get Datatables Result
 */
export const getDatatablesResultV1ApiGroupResultsQueryIdDatatablesGet = (
    queryId: string,
    params: GetDatatablesResultV1ApiGroupResultsQueryIdDatatablesGetParams,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<unknown>(
    {url: `/v1/api/group_results/${queryId}/datatables`, method: 'GET',
        params
    },
    options);
  }



export const getGetDatatablesResultV1ApiGroupResultsQueryIdDatatablesGetKey = (queryId: string,
    params: GetDatatablesResultV1ApiGroupResultsQueryIdDatatablesGetParams,) => [`/v1/api/group_results/${queryId}/datatables`, ...(params ? [params]: [])] as const;

export type GetDatatablesResultV1ApiGroupResultsQueryIdDatatablesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getDatatablesResultV1ApiGroupResultsQueryIdDatatablesGet>>>
export type GetDatatablesResultV1ApiGroupResultsQueryIdDatatablesGetQueryError = HTTPValidationError

/**
 * @summary Get Datatables Result
 */
export const useGetDatatablesResultV1ApiGroupResultsQueryIdDatatablesGet = <TError = HTTPValidationError>(
  queryId: string,
    params: GetDatatablesResultV1ApiGroupResultsQueryIdDatatablesGetParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getDatatablesResultV1ApiGroupResultsQueryIdDatatablesGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(queryId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetDatatablesResultV1ApiGroupResultsQueryIdDatatablesGetKey(queryId,params) : null);
  const swrFn = () => getDatatablesResultV1ApiGroupResultsQueryIdDatatablesGet(queryId,params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get query results as JSON
 * @summary Get Json Result
 */
export const getJsonResultV1ApiGroupResultsQueryIdJsonGet = (
    queryId: string,
    params: GetJsonResultV1ApiGroupResultsQueryIdJsonGetParams,
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<unknown>(
    {url: `/v1/api/group_results/${queryId}/json`, method: 'GET',
        params
    },
    options);
  }



export const getGetJsonResultV1ApiGroupResultsQueryIdJsonGetKey = (queryId: string,
    params: GetJsonResultV1ApiGroupResultsQueryIdJsonGetParams,) => [`/v1/api/group_results/${queryId}/json`, ...(params ? [params]: [])] as const;

export type GetJsonResultV1ApiGroupResultsQueryIdJsonGetQueryResult = NonNullable<Awaited<ReturnType<typeof getJsonResultV1ApiGroupResultsQueryIdJsonGet>>>
export type GetJsonResultV1ApiGroupResultsQueryIdJsonGetQueryError = HTTPValidationError

/**
 * @summary Get Json Result
 */
export const useGetJsonResultV1ApiGroupResultsQueryIdJsonGet = <TError = HTTPValidationError>(
  queryId: string,
    params: GetJsonResultV1ApiGroupResultsQueryIdJsonGetParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getJsonResultV1ApiGroupResultsQueryIdJsonGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(queryId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetJsonResultV1ApiGroupResultsQueryIdJsonGetKey(queryId,params) : null);
  const swrFn = () => getJsonResultV1ApiGroupResultsQueryIdJsonGet(queryId,params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Read Root
 */
export const readRootGet = (
    
 options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<string>(
    {url: `/`, method: 'GET'
    },
    options);
  }



export const getReadRootGetKey = () => [`/`] as const;

export type ReadRootGetQueryResult = NonNullable<Awaited<ReturnType<typeof readRootGet>>>
export type ReadRootGetQueryError = unknown

/**
 * @summary Read Root
 */
export const useReadRootGet = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof readRootGet>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof axiosInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getReadRootGetKey() : null);
  const swrFn = () => readRootGet(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
